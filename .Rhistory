function(m, t, w, r, f) c(m, t, w, r, f))
) %>%
mutate(max_dow = map(r_dow, ~which.max(.)))
lambda_r
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow = map(r_dow, ~which.max(.))
)
lambda_r
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow = map_dbl(r_dow, ~which.max(.))
)
lambda_r
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
lambda_r
mean(lambda_r$max_dow == "Wed")
set.seed(12345)
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
set.seed(12345)
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
set.seed(12345)
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
library(tidyverse)
library(patchwork)
library(glue)
library(scales)
D <- c(1, 1, 1, 1, 0, 0, 1, 1, 1, 0)
theta <- seq(0, 1, by = 0.1)
prior <- rep(1/11, 11)
likelihood <- theta^7 * (1 - theta)^3
data.frame(theta, likelihood) %>%
ggplot() +
geom_segment(aes(x = theta, xend = theta, y = 0, yend = likelihood),
linetype = 2, color = "steelblue") +
geom_point(aes(x = theta, y = likelihood), color = "steelblue", size = 3) +
scale_x_continuous(breaks = theta) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = expression(paste("Maximum likelihood of observing D is at ", theta, " = 0.7.")),
x = expression(theta), y = expression(f[theta](D)))
posterior <- likelihood / sum(likelihood * prior) * prior
data.frame(theta, prior, posterior) %>%
pivot_longer(cols = c(prior, posterior), values_to = "pi") %>%
ggplot() +
geom_point(aes(x = theta, y = pi, color = name), size = 1) +
geom_line(aes(x = theta, y = pi, color = name), size = 1) +
scale_x_continuous(breaks = theta) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Posterior probabilities are adjusted priors.",
color = NULL,
x = expression(theta), y = "P")
prior <- c(.05, .05, .05, .05, .05, .10, .15, .20, .15, .10, .05)
posterior <- likelihood / sum(likelihood * prior) * prior
data.frame(theta, prior, posterior) %>%
pivot_longer(cols = c(prior, posterior), values_to = "pi") %>%
ggplot() +
geom_point(aes(x = theta, y = pi, color = name), size = 1) +
geom_line(aes(x = theta, y = pi, color = name), size = 1) +
scale_x_continuous(breaks = theta) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "Smarter priors increase posterior probability at maximum.",
color = NULL, x = expression(theta), y = "P")
D100 <- rbernoulli(100, p = 0.7) %>% as.numeric()
likelihood <- theta^sum(D100) * (1 - theta)^(length(D100)-sum(D100))
posterior <- likelihood / sum(likelihood * prior) * prior
data.frame(theta, prior, posterior) %>%
pivot_longer(cols = c(prior, posterior), values_to = "pi") %>%
ggplot() +
geom_point(aes(x = theta, y = pi, color = name), size = 1) +
geom_line(aes(x = theta, y = pi, color = name), size = 1) +
scale_x_continuous(breaks = theta) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "More observations tighten the posterior distribution.",
color = NULL, x = expression(theta), y = "P")
theta <- seq(0, 1, by = .01)
prior <- rep(1/100, 101)
likelihood <- theta^sum(D100) * (1 - theta)^(length(D100)-sum(D100))
posterior <- likelihood / sum(likelihood * prior) * prior
data.frame(theta, prior, posterior) %>%
pivot_longer(cols = c(prior, posterior), values_to = "pi") %>%
ggplot() +
geom_point(aes(x = theta, y = pi, color = name), size = 1) +
geom_line(aes(x = theta, y = pi, color = name), size = 1) +
scale_x_continuous(breaks = seq(0, 1, by = 0.1)) +
theme_minimal() +
theme(panel.grid.minor = element_blank()) +
labs(title = "More priors smooths the distribution.",
color = NULL, x = expression(theta), y = "P")
plot_bayes <- function(alpha, beta, a, b) {
prior_ev <- (alpha / (alpha + beta)) %>% round(2)
posterior_ev <- ((alpha + a) / (alpha + beta + a + b)) %>% round(2)
dat <- data.frame(theta = seq(0, 1, by = .01)) %>%
mutate(prior = (1 / beta(alpha, beta)) * theta^(alpha-1) * (1-theta)^(beta-1),
prior_ci = theta > qbeta(.025, alpha, beta) &
theta < qbeta(.975, alpha, beta),
likelihood = theta^a * (1-theta)^b,
posterior = (1 / beta(alpha + a, beta + b)) * theta^(alpha-1+a) * (1-theta)^(beta-1+b),
posterior_ci = theta > qbeta(.025, alpha + a, beta + b) &
theta < qbeta(.975, alpha + a, beta + b))
p_prior <- dat %>%
ggplot(aes(x = theta, y = prior)) +
geom_line(color = "steelblue") +
geom_area(aes(alpha = prior_ci), fill = "steelblue") +
geom_vline(xintercept = prior_ev, color = "steelblue") +
scale_alpha_manual(values = c(.1, .5)) +
theme_minimal() +
theme(legend.position = "none") +
labs(x = NULL)
p_likelihood <- dat %>%
ggplot(aes(x = theta, y = likelihood)) +
geom_line(color = "steelblue") +
theme_minimal() +
theme(legend.position = "none") +
labs(x = NULL)
p_posterior <- dat %>%
ggplot(aes(x = theta, y = posterior)) +
geom_line(color = "steelblue") +
geom_area(aes(alpha = posterior_ci), fill = "steelblue") +
geom_vline(xintercept = posterior_ev, color = "steelblue") +
scale_alpha_manual(values = c(.1, .5))  +
theme_minimal() +
theme(legend.position = "none") +
labs(x = expression(theta))
out <- p_prior / p_likelihood / p_posterior +
plot_annotation(
title = glue("Beta({alpha}, {beta}) prior with observed evidence a = {a} ",
"and b = {b}"),
subtitle = "with shaded 95% credible interval.",
caption = glue("Prior expected value = {prior_ev}; Posterior expected ",
"value = {posterior_ev}"))
out
}
plot_bayes(alpha = 10, beta = 10, a = 7, b = 3)
plot_bayes(alpha = 7, beta = 3, a = 7, b = 3)
.5^1 * .5^1
dbinom(1, 1, .5)
dbinom(11, 11, .5)
beta(11, 11)
prior <- function(theta, alpha, beta) {
(1 / beta(alpha, beta)) * theta^(alpha-1) * (1-theta)^(beta-1)
}
posterior <- function(theta, alpha, beta, a, b) {
(1 / beta(alpha + a, beta + b)) * theta^(alpha-1+a) * (1-theta)^(beta-1+b)
}
prior(.5, 115, 85)
posterior(.5, 1, 1, 10, 10)
posterior(.5, 1, 1, 10, 10) / prior(.5, 1, 1)
1 / beta(115, 85)
# Posterior Distribution
1/beta(1+10, 1+10) * .5^(1-1+10) * (1-.5)^(1-1+10)
dbeta(.5, 11, 11)
# Prior Beta Distributions
1/beta(1, 1) * .5^(1-1) * (1-.5)^(1-1)
dbeta(.5, 1, 1)
dbeta(.5, 115, 85)
theta <- 0.5
alpha <- 1
beta <- 1
a <- 10
b <- 10
(prior_likelihood <- (1 / beta(alpha, beta)) * theta^(alpha-1) * (1-theta)^(beta-1))
(posterior_likelihood <- (1 / beta(alpha + a, beta + b)) * theta^(alpha-1+a) * (1-theta)^(beta-1+b))
(bayes_factor <- posterior_likelihood / prior_likelihood)
# 3.7 on alpha = beta = 1
# 1.91 on alpha = beta = 4
(ad_prop_test <- prop.test(13, 100))
ad_prop_test <- prop.test(13, 100)
click_rate_mu <- ad_prop_test$estimate
click_rate_se <- sqrt(click_rate_mu*(1-click_rate_mu)) / sqrt(100)
data.frame(pi = seq(0, .30, by = .01)) %>%
mutate(
likelihood = dnorm(pi, click_rate_mu, click_rate_se),
# observed = map(pi, ~ c(., 1 - .) * 100),
# expected = map(13/100, ~c(., 1 - .) * 100),
# x2 = map2_dbl(observed, expected, ~sum((.x - .y)^2 / .y)),
# likelihood = dchisq(x2, 1),
# pcs = pchisq(x2, 1),
ci_low = if_else(pi <= ad_prop_test$conf.int[1], likelihood, NA_real_),
ci_high = if_else(pi >= ad_prop_test$conf.int[2], likelihood, NA_real_)
) %>%
ggplot(aes(x = pi)) +
geom_line(aes(y = likelihood)) +
geom_area(aes(y = ci_low), fill = "firebrick", alpha = .4) +
geom_area(aes(y = ci_high), fill = "firebrick", alpha = .4) +
geom_vline(xintercept = click_rate_mu, linetype = 2) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, .3, .05)) +
theme(panel.grid.minor = element_blank()) +
labs(title = "Frequentist proportion test for 13 clicks in 100 impressions",
subtitle = glue("p = {click_rate_mu}, 95%-CI (",
"{ad_prop_test$conf.int[1] %>% scales::number(accuracy = .01)}, ",
"{ad_prop_test$conf.int[2] %>% scales::number(accuracy = .01)})"),
x = expression(theta))
df_sim <- data.frame(click_prob = runif(1000, 0.0, 0.3))
df_sim$click_n <- rbinom(1000, 100, df_sim$click_prob)
df_sim %>%
mutate(is_13 = factor(click_n == 13, levels = c(TRUE, FALSE))) %>%
ggplot(aes(x = click_prob, y = click_n, color = is_13)) +
geom_point(alpha = 0.6, show.legend = FALSE) +
geom_hline(yintercept = 13, color = "steelblue", linetype = 1, size = .5) +
scale_color_manual(values = c("TRUE" = "steelblue", "FALSE" = "gray80")) +
theme_minimal() +
labs(title = "Joint probability of observed clicks and click probability",
subtitle = "with conditioning on 13 observed clicks.",
y = "clicks per 100 ads",
x = expression(theta))
# median and credible interval
(sim_ci <- df_sim %>% filter(click_n == 13) %>% pull(click_prob) %>%
quantile(c(.025, .5, .975)))
df_sim %>%
filter(click_n == 13) %>%
ggplot(aes(x = click_prob)) +
geom_density() +
geom_vline(xintercept = sim_ci[2]) +
geom_vline(xintercept = sim_ci[1], linetype = 2) +
geom_vline(xintercept = sim_ci[3], linetype = 2) +
scale_x_continuous(breaks = seq(0, .3, .05)) +
theme_minimal() +
labs(title = "Posterior click likelihood distribution",
subtitle = glue("p = {sim_ci[2] %>% scales::number(accuracy = .01)}, 95%-CI (",
"{sim_ci[1] %>% scales::number(accuracy = .01)}, ",
"{sim_ci[3] %>% scales::number(accuracy = .01)})"),
x = expression(theta), y = "density (likelihood)")
df_bayes <- expand.grid(
click_prob = seq(0, .3, by = .001),
click_n = 0:100
) %>%
mutate(
prior = dunif(click_prob, min = 0, max = 0.3),
likelihood = dbinom(click_n, 100, click_prob),
probability = likelihood * prior / sum(likelihood * prior)
)
df_bayes %>%
mutate(is_13 = factor(click_n == 13, levels = c(TRUE, FALSE))) %>%
filter(probability > .0001) %>%
ggplot(aes(x = click_prob, y = click_n, color = is_13)) +
geom_point(alpha = 0.6, show.legend = FALSE) +
geom_hline(yintercept = 13, color = "steelblue", linetype = 1, size = .5) +
scale_color_manual(values = c("TRUE" = "steelblue", "FALSE" = "gray80")) +
# scale_color_gradient(low = "white", high = "steelblue", guide = "colorbar") +
theme_minimal() +
labs(title = "Joint probability of clicks and click probability.",
subtitle = "with conditioning on 13 observed clicks.",
y = "clicks per 100 ads",
x = expression(theta))
df_bayes_13 <- df_bayes %>% filter(click_n == 13) %>%
mutate(posterior = probability / sum(probability))
sampling_idx <- sample(
1:nrow(df_bayes_13),
size = 10000,
replace = TRUE,
prob = df_bayes_13$posterior
)
sampling_vals <- df_bayes_13[sampling_idx, ]
(df_bayes_ci <- quantile(sampling_vals$click_prob, c(.025, .5, .975)))
df_bayes %>%
filter(click_n == 13) %>%
mutate(likelihood = probability / sum(probability),
ci_low = if_else(click_prob < df_bayes_ci[1], likelihood, NA_real_),
ci_high = if_else(click_prob > df_bayes_ci[3], likelihood, NA_real_),
ci = if_else(click_prob >= df_bayes_ci[1] &
click_prob <= df_bayes_ci[3], "Y", "N")) %>%
ggplot(aes(x = click_prob, y = likelihood)) +
geom_line() +
geom_area(aes(y = ci_low), fill = "firebrick", alpha = .4) +
geom_area(aes(y = ci_high), fill = "firebrick", alpha = .4) +
geom_vline(xintercept = df_bayes_ci[2], linetype = 2) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, .3, .05)) +
theme(panel.grid.minor = element_blank()) +
labs(title = "Posterior click probability",
subtitle = glue("p = {df_bayes_ci[2] %>% scales::number(accuracy = .01)}, 95%-CI (",
"{df_bayes_ci[1] %>% scales::number(accuracy = .01)}, ",
"{df_bayes_ci[3] %>% scales::number(accuracy = .01)})"),
x = expression(theta))
temp <- c(19, 23, 20, 17, 23)
mdl_grid <- expand_grid(mu = seq(8, 30, by = 0.5),
sigma = seq(.1, 10, by = 0.1))
mdl_grid_2 <- mdl_grid %>%
mutate(
mu_prior = map_dbl(mu, ~dnorm(., mean = 18, sd = 5)),
sigma_prior = map_dbl(sigma, ~dunif(., 0, 10)),
prior = mu_prior * sigma_prior, # combined prior,
likelihood = map2_dbl(mu, sigma, ~dnorm(temp, .x, .y) %>% prod()),
posterior = likelihood * prior / sum(likelihood * prior)
)
mdl_grid_2 %>%
ggplot(aes(x = mu, y = sigma, fill = posterior)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue", guide = "colorbar") +
theme_minimal() +
labs(title = "Joint probability of mu and sigma.",
x = expression(mu), y = expression(sigma))
sampling_idx <- sample(1:nrow(mdl_grid), size = 10000, replace = TRUE, prob = mdl_grid$posterior)
sampling_vals <- mdl_grid[sampling_idx, c("mu", "sigma")]
mu_ci <- quantile(sampling_vals$mu, c(.025, .5, .975))
sigma_ci <- quantile(sampling_vals$sigma, c(.025, .5, .975))
ci <- qnorm(c(.025, .5, .975), mean = mu_ci[2], sd = sigma_ci[2])
data.frame(temp = seq(0, 30, by = .1)) %>%
mutate(prob = map_dbl(temp, ~dnorm(., mean = ci[2], sd = sigma_ci[2])),
ci = if_else(temp >= ci[1] & temp <= ci[3], "Y", "N")) %>%
ggplot(aes(x = temp, y = prob)) +
geom_area(aes(y = if_else(ci == "N", prob, 0)),
fill = "firebrick", show.legend = FALSE) +
geom_line() +
geom_vline(xintercept = ci[2], linetype = 2) +
theme_minimal() +
scale_x_continuous(breaks = seq(0, 30, 5)) +
theme(panel.grid.minor = element_blank()) +
labs(title = "Posterior temperature probability",
subtitle = glue("mu = {ci[2] %>% scales::number(accuracy = .1)}, 95%-CI (",
"{ci[1] %>% scales::number(accuracy = .1)}, ",
"{ci[3] %>% scales::number(accuracy = .1)})"))
pred_temp <- rnorm(1000, mean = sampling_vals$mu, sampling_vals$sigma)
scales::percent(sum(pred_temp >= 18) / length(pred_temp))
D <- c(50, 65, 72, 63, 70)
# The prior distribution
qgamma(p = c(.025, .5, .975), 784, 11.2)
# The posterior distribution
qgamma(p = c(.025, .5, .975), 784 + 320, 11.2 + 5)
qnorm(p = c(.025, .5, .975), 64, 3.6)
qgamma(p = c(.025, .5, .975), .01 + 320, .01 + 5)
tibble(
lambda = seq(0, 80, .1),
`Gamma(.01, .01)` = dgamma(lambda, .01, .01),
`Gamma(.01 + 320, .01 + 5)` = dgamma(lambda, .01 + 320, .01 + 5),
`Gamma(784, 11.2)` = dgamma(lambda, 784, 11.2),
`Gamma(784 + 320, 11.2 + 5)` = dgamma(lambda, 784 + 320, 11.2 + 5)
) %>%
pivot_longer(-lambda) %>%
mutate(name = fct_inorder(name)) %>%
mutate(prior = if_else(str_detect(name, "\\+"), "posterior", "prior")) %>%
ggplot(aes(x = lambda, y = value, color = name, linetype = prior)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c(rep("seagreen", 2), rep("firebrick", 2))) +
labs(color = NULL, linetype = NULL, y = "density")
pp <- seq(0.01, .99, by = .0001)
x <- map_dbl(pp, ~qgamma(., 784 + 320, 11.2 + 5))
hdrcde::hdr(x, prob = 95)$hdr
a <- 1104 # 1020
b <- 16.2 # 15
set.seed(1234)
lambda_r <- rgamma(1000, a, b)
d_tilde <- rpois(1000, lambda_r)
# predicted value
mean(d_tilde)
# 95% prediction interval
quantile(d_tilde, c(.025, .975))
# probability of exceeding 80
mean(d_tilde > 80)
# 99th percentile
quantile(d_tilde, .99)
day_tbl <- tibble(
dow = fct_inorder(c("Mon", "Tue", "Wed", "Thu", "Fri")),
d = c(50, 65, 72, 63, 70)
) %>%
mutate(
post_a = 700 + d,
post_b = 10 + 1,
post_mean = post_a / post_b,
post_lci = qgamma(.025, post_a, post_b),
post_uci = qgamma(.975, post_a, post_b)
)
day_tbl
set.seed(123)
lambda_r_mon <- rgamma(1000, 750, 11)
lambda_r_tue <- rgamma(1000, 765, 11)
mean(lambda_r_mon < lambda_r_tue)
set.seed(12345)
lambda_r <- tibble(
r_mon = rgamma(1000, 750, 11),
r_tue = rgamma(1000, 765, 11),
r_wed = rgamma(1000, 772, 11),
r_thu = rgamma(1000, 763, 11),
r_fri = rgamma(1000, 770, 11),
r_dow = pmap(list(r_mon, r_tue, r_wed, r_thu, r_fri),
function(m, t, w, r, f) c(m, t, w, r, f)),
max_dow_idx = map_dbl(r_dow, ~which.max(.)),
max_dow = map_chr(max_dow_idx, ~c("Mon", "Tue", "Wed", "Thu", "Fri")[.])
)
mean(lambda_r$max_dow == "Wed")
lambda_r
dtf <- data.frame(Day = factor(c('Monday','Tuesday','Wednesday','Thursday','Friday'),
levels=c('Monday','Tuesday','Wednesday','Thursday','Friday')),
x = c(50,65,72,63,70))
# parameters a and b for the posterior distribution:
dtf$post.a <- 700+dtf$x
dtf$post.b <- 10+1
# posterior mean:
dtf$post.mean <- round(dtf$post.a/dtf$post.b,1)
# posterior credible intervals (lower and upper limits)
dtf$post.lo <- round(qgamma(.025,dtf$post.a,dtf$post.b),1)
dtf$post.hi <- round(qgamma(.975,dtf$post.a,dtf$post.b),1)
set.seed(12345) # setting the seed to make the example repeatable
Niter <- 10^4 #size of the posterior sample
mu.post <- array(dim=c(Niter,5))  # preparing the array for my posterior samples
# 5 is the number of days in the week
# producing the posterior sample for each day in turn:
for(j in 1:5){
mu.post[,j] <- rgamma(Niter,dtf$post.a[j],dtf$post.b[j])
}
head(mu.post)
max.mu <- apply(mu.post,1,which.max)
print(table(max.mu))
min.mu <- apply(mu.post,1,which.min)
print(table(min.mu))
mean(min.mu == 1)
